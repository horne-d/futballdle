{"ast":null,"code":"import { getGuessStatuses } from './statuses';\nimport { solutionIndex, unicodeSplit } from './words';\nimport { MAX_CHALLENGES } from '../constants/settings';\nimport { UAParser } from 'ua-parser-js';\nimport copy from 'copy-to-clipboard';\nconst webShareApiDeviceTypes = ['mobile', 'smarttv', 'wearable'];\nconst parser = new UAParser();\nconst browser = parser.getBrowser();\nconst device = parser.getDevice();\nexport const shareStatus = (guesses, lost, isHardMode, isDarkMode, isHighContrastMode, handleShareToClipboard) => {\n  const textToShare = `Footballdle ${solutionIndex} ${lost ? 'X' : guesses.length}/${MAX_CHALLENGES}${isHardMode ? '*' : ''}\\n\\n` + generateEmojiGrid(guesses, getEmojiTiles(isDarkMode, isHighContrastMode)) + '\\n\\n www.footballdle.co.uk' + '\\n\\n #footballdle';\n  const shareData = {\n    text: textToShare\n  };\n  copy(textToShare);\n  let shareSuccess = false;\n\n  try {\n    if (attemptShare(shareData)) {\n      navigator.share(shareData);\n      shareSuccess = true;\n    }\n  } catch (error) {\n    shareSuccess = false;\n    copy('Footballdle - www.footballdle.co.uk');\n  }\n\n  if (!shareSuccess) {\n    navigator.clipboard.writeText(textToShare);\n    handleShareToClipboard();\n  }\n};\nexport const generateEmojiGrid = (guesses, tiles) => {\n  return guesses.map(guess => {\n    const status = getGuessStatuses(guess);\n    const splitGuess = unicodeSplit(guess);\n    return splitGuess.map((_, i) => {\n      switch (status[i]) {\n        case 'correct':\n          return tiles[0];\n\n        case 'present':\n          return tiles[1];\n\n        default:\n          return tiles[2];\n      }\n    }).join('');\n  }).join('\\n');\n};\n\nconst attemptShare = shareData => {\n  var _browser$name, _device$type;\n\n  return (// Deliberately exclude Firefox Mobile, because its Web Share API isn't working correctly\n    ((_browser$name = browser.name) === null || _browser$name === void 0 ? void 0 : _browser$name.toUpperCase().indexOf('FIREFOX')) === -1 && webShareApiDeviceTypes.indexOf((_device$type = device.type) !== null && _device$type !== void 0 ? _device$type : '') !== -1 && navigator.canShare && navigator.canShare(shareData) && navigator.share\n  );\n};\n\nconst getEmojiTiles = (isDarkMode, isHighContrastMode) => {\n  let tiles = [];\n  tiles.push(isHighContrastMode ? 'ğŸŸ§' : 'ğŸŸ©');\n  tiles.push(isHighContrastMode ? 'ğŸŸ¦' : 'ğŸŸ¨');\n  tiles.push(isDarkMode ? 'â¬›' : 'â¬œ');\n  return tiles;\n};","map":{"version":3,"sources":["/Users/danielhorne/Desktop/Development/futballdle/src/lib/share.ts"],"names":["getGuessStatuses","solutionIndex","unicodeSplit","MAX_CHALLENGES","UAParser","copy","webShareApiDeviceTypes","parser","browser","getBrowser","device","getDevice","shareStatus","guesses","lost","isHardMode","isDarkMode","isHighContrastMode","handleShareToClipboard","textToShare","length","generateEmojiGrid","getEmojiTiles","shareData","text","shareSuccess","attemptShare","navigator","share","error","clipboard","writeText","tiles","map","guess","status","splitGuess","_","i","join","name","toUpperCase","indexOf","type","canShare","push"],"mappings":"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","sourcesContent":["import { getGuessStatuses } from './statuses'\nimport { solutionIndex, unicodeSplit } from './words'\nimport { MAX_CHALLENGES } from '../constants/settings'\nimport { UAParser } from 'ua-parser-js'\nimport copy from 'copy-to-clipboard';\n \nconst webShareApiDeviceTypes: string[] = ['mobile', 'smarttv', 'wearable']\nconst parser = new UAParser()\nconst browser = parser.getBrowser()\nconst device = parser.getDevice()\n\nexport const shareStatus = (\n  guesses: string[],\n  lost: boolean,\n  isHardMode: boolean,\n  isDarkMode: boolean,\n  isHighContrastMode: boolean,\n  handleShareToClipboard: () => void\n) => {\n  const textToShare =\n    `Footballdle ${solutionIndex} ${\n      lost ? 'X' : guesses.length\n    }/${MAX_CHALLENGES}${isHardMode ? '*' : ''}\\n\\n` +\n    generateEmojiGrid(guesses, getEmojiTiles(isDarkMode, isHighContrastMode)) +\n    '\\n\\n www.footballdle.co.uk' + '\\n\\n #footballdle'\n\n  const shareData = { text: textToShare }\n\n  copy(textToShare);\n\n  let shareSuccess = false\n\n  try {\n    if (attemptShare(shareData)) {\n      navigator.share(shareData)\n      shareSuccess = true\n    }\n  } catch (error) {\n    shareSuccess = false\n    copy('Footballdle - www.footballdle.co.uk');\n  }\n\n  if (!shareSuccess) {\n    navigator.clipboard.writeText(textToShare)\n    handleShareToClipboard()\n  }\n}\n\nexport const generateEmojiGrid = (guesses: string[], tiles: string[]) => {\n  return guesses\n    .map((guess) => {\n      const status = getGuessStatuses(guess)\n      const splitGuess = unicodeSplit(guess)\n\n      return splitGuess\n        .map((_, i) => {\n          switch (status[i]) {\n            case 'correct':\n              return tiles[0]\n            case 'present':\n              return tiles[1]\n            default:\n              return tiles[2]\n          }\n        })\n        .join('')\n    })\n    .join('\\n')\n}\n\nconst attemptShare = (shareData: object) => {\n  return (\n    // Deliberately exclude Firefox Mobile, because its Web Share API isn't working correctly\n    browser.name?.toUpperCase().indexOf('FIREFOX') === -1 &&\n    webShareApiDeviceTypes.indexOf(device.type ?? '') !== -1 &&\n    navigator.canShare &&\n    navigator.canShare(shareData) &&\n    navigator.share\n  )\n}\n\nconst getEmojiTiles = (isDarkMode: boolean, isHighContrastMode: boolean) => {\n  let tiles: string[] = []\n  tiles.push(isHighContrastMode ? 'ğŸŸ§' : 'ğŸŸ©')\n  tiles.push(isHighContrastMode ? 'ğŸŸ¦' : 'ğŸŸ¨')\n  tiles.push(isDarkMode ? 'â¬›' : 'â¬œ')\n  return tiles\n}"]},"metadata":{},"sourceType":"module"}