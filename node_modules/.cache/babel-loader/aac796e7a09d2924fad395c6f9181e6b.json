{"ast":null,"code":"import{MAX_CHALLENGES}from'../../constants/settings';import{CompletedRow}from'./CompletedRow';import{CurrentRow}from'./CurrentRow';import{EmptyRow}from'./EmptyRow';import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export var Grid=function Grid(_ref){var guesses=_ref.guesses,currentGuess=_ref.currentGuess,isRevealing=_ref.isRevealing,currentRowClassName=_ref.currentRowClassName;var empties=guesses.length<MAX_CHALLENGES-1?Array.from(Array(MAX_CHALLENGES-1-guesses.length)):[];return/*#__PURE__*/_jsxs(_Fragment,{children:[guesses.map(function(guess,i){return/*#__PURE__*/_jsx(CompletedRow,{guess:guess,isRevealing:isRevealing&&guesses.length-1===i},i);}),guesses.length<MAX_CHALLENGES&&/*#__PURE__*/_jsx(CurrentRow,{guess:currentGuess,className:currentRowClassName}),empties.map(function(_,i){return/*#__PURE__*/_jsx(EmptyRow,{},i);})]});};","map":{"version":3,"sources":["/Users/danielhorne/Desktop/Development/react-wordle/src/components/grid/Grid.tsx"],"names":["MAX_CHALLENGES","CompletedRow","CurrentRow","EmptyRow","Grid","guesses","currentGuess","isRevealing","currentRowClassName","empties","length","Array","from","map","guess","i","_"],"mappings":"AAAA,OAASA,cAAT,KAA+B,0BAA/B,CACA,OAASC,YAAT,KAA6B,gBAA7B,CACA,OAASC,UAAT,KAA2B,cAA3B,CACA,OAASC,QAAT,KAAyB,YAAzB,C,6IASA,MAAO,IAAMC,CAAAA,IAAI,CAAG,QAAPA,CAAAA,IAAO,MAKP,IAJXC,CAAAA,OAIW,MAJXA,OAIW,CAHXC,YAGW,MAHXA,YAGW,CAFXC,WAEW,MAFXA,WAEW,CADXC,mBACW,MADXA,mBACW,CACX,GAAMC,CAAAA,OAAO,CACXJ,OAAO,CAACK,MAAR,CAAiBV,cAAc,CAAG,CAAlC,CACIW,KAAK,CAACC,IAAN,CAAWD,KAAK,CAACX,cAAc,CAAG,CAAjB,CAAqBK,OAAO,CAACK,MAA9B,CAAhB,CADJ,CAEI,EAHN,CAKA,mBACE,2BACGL,OAAO,CAACQ,GAAR,CAAY,SAACC,KAAD,CAAQC,CAAR,qBACX,KAAC,YAAD,EAEE,KAAK,CAAED,KAFT,CAGE,WAAW,CAAEP,WAAW,EAAIF,OAAO,CAACK,MAAR,CAAiB,CAAjB,GAAuBK,CAHrD,EACOA,CADP,CADW,EAAZ,CADH,CAQGV,OAAO,CAACK,MAAR,CAAiBV,cAAjB,eACC,KAAC,UAAD,EAAY,KAAK,CAAEM,YAAnB,CAAiC,SAAS,CAAEE,mBAA5C,EATJ,CAWGC,OAAO,CAACI,GAAR,CAAY,SAACG,CAAD,CAAID,CAAJ,qBACX,KAAC,QAAD,IAAeA,CAAf,CADW,EAAZ,CAXH,GADF,CAiBD,CA5BM","sourcesContent":["import { MAX_CHALLENGES } from '../../constants/settings'\nimport { CompletedRow } from './CompletedRow'\nimport { CurrentRow } from './CurrentRow'\nimport { EmptyRow } from './EmptyRow'\n\ntype Props = {\n  guesses: string[]\n  currentGuess: string\n  isRevealing?: boolean\n  currentRowClassName: string\n}\n\nexport const Grid = ({\n  guesses,\n  currentGuess,\n  isRevealing,\n  currentRowClassName,\n}: Props) => {\n  const empties =\n    guesses.length < MAX_CHALLENGES - 1\n      ? Array.from(Array(MAX_CHALLENGES - 1 - guesses.length))\n      : []\n\n  return (\n    <>\n      {guesses.map((guess, i) => (\n        <CompletedRow\n          key={i}\n          guess={guess}\n          isRevealing={isRevealing && guesses.length - 1 === i}\n        />\n      ))}\n      {guesses.length < MAX_CHALLENGES && (\n        <CurrentRow guess={currentGuess} className={currentRowClassName} />\n      )}\n      {empties.map((_, i) => (\n        <EmptyRow key={i} />\n      ))}\n    </>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}