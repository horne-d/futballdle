{"ast":null,"code":"var _jsxFileName = \"/Users/danielhorne/Desktop/Development/react-wordle/src/components/grid/Grid.tsx\";\nimport { MAX_CHALLENGES } from '../../constants/settings';\nimport { CompletedRow } from './CompletedRow';\nimport { CurrentRow } from './CurrentRow';\nimport { EmptyRow } from './EmptyRow';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const Grid = _ref => {\n  let {\n    guesses,\n    currentGuess,\n    isRevealing,\n    currentRowClassName\n  } = _ref;\n  const empties = guesses.length < MAX_CHALLENGES - 1 ? Array.from(Array(MAX_CHALLENGES - 1 - guesses.length)) : [];\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [guesses.map((guess, i) => /*#__PURE__*/_jsxDEV(CompletedRow, {\n      guess: guess,\n      isRevealing: isRevealing && guesses.length - 1 === i\n    }, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 9\n    }, this)), guesses.length < MAX_CHALLENGES && /*#__PURE__*/_jsxDEV(CurrentRow, {\n      guess: currentGuess,\n      className: currentRowClassName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }, this), empties.map((_, i) => /*#__PURE__*/_jsxDEV(EmptyRow, {}, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true);\n};\n_c = Grid;\n\nvar _c;\n\n$RefreshReg$(_c, \"Grid\");","map":{"version":3,"sources":["/Users/danielhorne/Desktop/Development/react-wordle/src/components/grid/Grid.tsx"],"names":["MAX_CHALLENGES","CompletedRow","CurrentRow","EmptyRow","Grid","guesses","currentGuess","isRevealing","currentRowClassName","empties","length","Array","from","map","guess","i","_"],"mappings":";AAAA,SAASA,cAAT,QAA+B,0BAA/B;AACA,SAASC,YAAT,QAA6B,gBAA7B;AACA,SAASC,UAAT,QAA2B,cAA3B;AACA,SAASC,QAAT,QAAyB,YAAzB;;;AASA,OAAO,MAAMC,IAAI,GAAG,QAKP;AAAA,MALQ;AACnBC,IAAAA,OADmB;AAEnBC,IAAAA,YAFmB;AAGnBC,IAAAA,WAHmB;AAInBC,IAAAA;AAJmB,GAKR;AACX,QAAMC,OAAO,GACXJ,OAAO,CAACK,MAAR,GAAiBV,cAAc,GAAG,CAAlC,GACIW,KAAK,CAACC,IAAN,CAAWD,KAAK,CAACX,cAAc,GAAG,CAAjB,GAAqBK,OAAO,CAACK,MAA9B,CAAhB,CADJ,GAEI,EAHN;AAKA,sBACE;AAAA,eACGL,OAAO,CAACQ,GAAR,CAAY,CAACC,KAAD,EAAQC,CAAR,kBACX,QAAC,YAAD;AAEE,MAAA,KAAK,EAAED,KAFT;AAGE,MAAA,WAAW,EAAEP,WAAW,IAAIF,OAAO,CAACK,MAAR,GAAiB,CAAjB,KAAuBK;AAHrD,OACOA,CADP;AAAA;AAAA;AAAA;AAAA,YADD,CADH,EAQGV,OAAO,CAACK,MAAR,GAAiBV,cAAjB,iBACC,QAAC,UAAD;AAAY,MAAA,KAAK,EAAEM,YAAnB;AAAiC,MAAA,SAAS,EAAEE;AAA5C;AAAA;AAAA;AAAA;AAAA,YATJ,EAWGC,OAAO,CAACI,GAAR,CAAY,CAACG,CAAD,EAAID,CAAJ,kBACX,QAAC,QAAD,MAAeA,CAAf;AAAA;AAAA;AAAA;AAAA,YADD,CAXH;AAAA,kBADF;AAiBD,CA5BM;KAAMX,I","sourcesContent":["import { MAX_CHALLENGES } from '../../constants/settings'\nimport { CompletedRow } from './CompletedRow'\nimport { CurrentRow } from './CurrentRow'\nimport { EmptyRow } from './EmptyRow'\n\ntype Props = {\n  guesses: string[]\n  currentGuess: string\n  isRevealing?: boolean\n  currentRowClassName: string\n}\n\nexport const Grid = ({\n  guesses,\n  currentGuess,\n  isRevealing,\n  currentRowClassName,\n}: Props) => {\n  const empties =\n    guesses.length < MAX_CHALLENGES - 1\n      ? Array.from(Array(MAX_CHALLENGES - 1 - guesses.length))\n      : []\n\n  return (\n    <>\n      {guesses.map((guess, i) => (\n        <CompletedRow\n          key={i}\n          guess={guess}\n          isRevealing={isRevealing && guesses.length - 1 === i}\n        />\n      ))}\n      {guesses.length < MAX_CHALLENGES && (\n        <CurrentRow guess={currentGuess} className={currentRowClassName} />\n      )}\n      {empties.map((_, i) => (\n        <EmptyRow key={i} />\n      ))}\n    </>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}